{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SEODeploy: Flexible and Modular Python Library for Automating SEO Testing in Deployment Pipelines. \u00b6 Quick-start Guide \u00b6 This library attempts to provide a flexible format to allow developers to incorporate SEO checks into development workflows. It follows the following design constructs: Modular : See the modules folder for examples of drop in testing using the ModuleBase class. Modules dropped in here and configured in seodeploy_config.yaml are automatically tested against sample URLs. Diff Checking : Developers can specify in the seodeploy_config.yaml file where they expect to see differences by ignoring checks. Any other differences, depending on the design of the module, are diff checked across your prod and stage hosts and reported as errors. Sampled URLs : The library supplies a sampling mechanism based on ContentKing URLs or a supplied XML sitemap URL that attempts to extract random samples in a statistically significant way. But, developers are free to supply their own paths in the path_samples.txt file which are used to diff against production and staging. One good route would be to supply a path representing each template type. Flexible : The library contains code that is meant to be reconfigured and repurposed for individual needs. We have tried to make classes and functions as flexible as possible, towards this end. Logging : Error, Info, Warning notifications are logged to seotesting.log via included functionality. See TODO for what is currently in process. Get started by downloading the repo at: https://github.com/locomotive-agency/SEODeploy Warning This library should be considered beta software and not used as a dependable solution without thorough testing. Expect bugs. Modules Available \u00b6 You can run as many modules as you would like. If modules are configured in modules_activated of the seodeploy_config.yaml file, they will run. We have provided the following examples. ContentKing requires a subscription to ContentKing . Headless can be run on any machine capable of running Chrome. ContentKing Headless Creating Your Own Installing and Running \u00b6 We use Poetry for dependency management. In the future, we will provide a PyPi repo where the tool can be installed via standard pip install seodeploy Modules MUST be configured prior to running. See Modules Available for configurations. Install \u00b6 $ conda create --name seodeploy python=3.7 poetry $ conda activate seodeploy $ (seodeploy) git clone https://github.com/locomotive-agency/SEODeploy.git $ (seodeploy) cd SEODeploy $ (seodeploy) poetry install $ (seodeploy) poetry run seodeploy execute Configure Paths and Run \u00b6 Create Samples Paths File \u00b6 Using a ContentKing website ( 1-12346 is the site ID): $ (seodeploy) seodeploy sample --siteid 1-12346 Using a XML sitemap or sitemap index file: $ (seodeploy) seodeploy sample \\ --sitemap_url https://locomotive.agency/sitemap_index.xml Using a XML sitemap or sitemap index file plus limiting: $ (seodeploy) seodeploy sample \\ --sitemap_url https://locomotive.agency/sitemap_index.xml \\ --limit 100 Compare Staging and Production \u00b6 Uses seodeploy_config.yaml configuration and sample_paths.txt . $ (seodeploy) seodeploy execute Use another sample paths file. $ (seodeploy) seodeploy execute --samples_filename another_file.txt Example Jenkins integration \u00b6 Jenkinsfile \u00b6 ... stage('Staging SEO Test') { steps { sh './jenkins/scripts/seo_test.sh' } post { success { echo 'Sending success SEO testing notification...' emailext body: \"Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} seo testing is complete.\\n Check: ${env.BUILD_URL}\", recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: \"Jenkins staging SEO test complete: Job ${env.JOB_NAME}\" } } } ... seo_test.sh File \u00b6 python seodeploy sample --sitemap_url https://locomotive.agency/sitemap_index.xml python seodeploy execute","title":"Home"},{"location":"#seodeploy-flexible-and-modular-python-library-for-automating-seo-testing-in-deployment-pipelines","text":"","title":"SEODeploy: Flexible and Modular Python Library for Automating SEO Testing in Deployment Pipelines."},{"location":"#quick-start-guide","text":"This library attempts to provide a flexible format to allow developers to incorporate SEO checks into development workflows. It follows the following design constructs: Modular : See the modules folder for examples of drop in testing using the ModuleBase class. Modules dropped in here and configured in seodeploy_config.yaml are automatically tested against sample URLs. Diff Checking : Developers can specify in the seodeploy_config.yaml file where they expect to see differences by ignoring checks. Any other differences, depending on the design of the module, are diff checked across your prod and stage hosts and reported as errors. Sampled URLs : The library supplies a sampling mechanism based on ContentKing URLs or a supplied XML sitemap URL that attempts to extract random samples in a statistically significant way. But, developers are free to supply their own paths in the path_samples.txt file which are used to diff against production and staging. One good route would be to supply a path representing each template type. Flexible : The library contains code that is meant to be reconfigured and repurposed for individual needs. We have tried to make classes and functions as flexible as possible, towards this end. Logging : Error, Info, Warning notifications are logged to seotesting.log via included functionality. See TODO for what is currently in process. Get started by downloading the repo at: https://github.com/locomotive-agency/SEODeploy Warning This library should be considered beta software and not used as a dependable solution without thorough testing. Expect bugs.","title":"Quick-start Guide"},{"location":"#modules-available","text":"You can run as many modules as you would like. If modules are configured in modules_activated of the seodeploy_config.yaml file, they will run. We have provided the following examples. ContentKing requires a subscription to ContentKing . Headless can be run on any machine capable of running Chrome. ContentKing Headless Creating Your Own","title":"Modules Available"},{"location":"#installing-and-running","text":"We use Poetry for dependency management. In the future, we will provide a PyPi repo where the tool can be installed via standard pip install seodeploy Modules MUST be configured prior to running. See Modules Available for configurations.","title":"Installing and Running"},{"location":"#install","text":"$ conda create --name seodeploy python=3.7 poetry $ conda activate seodeploy $ (seodeploy) git clone https://github.com/locomotive-agency/SEODeploy.git $ (seodeploy) cd SEODeploy $ (seodeploy) poetry install $ (seodeploy) poetry run seodeploy execute","title":"Install"},{"location":"#configure-paths-and-run","text":"","title":"Configure Paths and Run"},{"location":"#create-samples-paths-file","text":"Using a ContentKing website ( 1-12346 is the site ID): $ (seodeploy) seodeploy sample --siteid 1-12346 Using a XML sitemap or sitemap index file: $ (seodeploy) seodeploy sample \\ --sitemap_url https://locomotive.agency/sitemap_index.xml Using a XML sitemap or sitemap index file plus limiting: $ (seodeploy) seodeploy sample \\ --sitemap_url https://locomotive.agency/sitemap_index.xml \\ --limit 100","title":"Create Samples Paths File"},{"location":"#compare-staging-and-production","text":"Uses seodeploy_config.yaml configuration and sample_paths.txt . $ (seodeploy) seodeploy execute Use another sample paths file. $ (seodeploy) seodeploy execute --samples_filename another_file.txt","title":"Compare Staging and Production"},{"location":"#example-jenkins-integration","text":"","title":"Example Jenkins integration"},{"location":"#jenkinsfile","text":"... stage('Staging SEO Test') { steps { sh './jenkins/scripts/seo_test.sh' } post { success { echo 'Sending success SEO testing notification...' emailext body: \"Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} seo testing is complete.\\n Check: ${env.BUILD_URL}\", recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: \"Jenkins staging SEO test complete: Job ${env.JOB_NAME}\" } } } ...","title":"Jenkinsfile"},{"location":"#seo_testsh-file","text":"python seodeploy sample --sitemap_url https://locomotive.agency/sitemap_index.xml python seodeploy execute","title":"seo_test.sh File"},{"location":"about/","text":"SEODeploy: About \u00b6 SEODeploy is a labor of love which attempts to solve a common issue with deployment processes: SEO Error Checking. Often small mistakes, such as a changed canonical pattern, can have far-reaching traffic implications when deployed to production. Further, a lot of time can be lost by having team members manually check pages for issues and some SEO issues are easy to miss. By bringing SEO teams and development teams together to decide on the correct items to validate, and providing an automated way of including those checks, we hope to provide a tool which saves time and creates more consistency in your CI/CD workflows. We decided to integrate ContentKing because it really does allow for fuller end-to-end confidence. You can integrate our tool to catch mistakes on staging, but even if a mistake passes to production, ContentKing is there to let you know immediately, so you can quickly roll back changes. Why Python? \u00b6 We know that items like Puppeteer run more naturally on Node and Python is in no way the most efficient language. A few of the reasons we still thought Python would be the correct choice: Pyppeteer is available for Headless Chrome support, which tries to mirror the functionality of Puppeteer, as closely as possible. Python is a popular, and growing language, so finding developers is easier than others. The upside on creating additional modules for link analysis, NLP, extraction, anomaly detection, etc, with popular, and trusted available libraries, was a clear win. Python is supported in most cloud function environments, so running at the location of your choice is an option. Python can run asynchronously or synchronously. The tool doesn't care what language your site is developed in. Only what is outputted to Staging and Production pages. Made By \u00b6 This opensource project is developed by LOCOMOTIVE , a Technical SEO Agency. Contact \u00b6 If you have questions on implementation, email me at jr.oakes@locomotive.agency . Interested in Contributing? \u00b6 Feel free to make a pull request, or email me at jr.oakes@locomotive.agency .","title":"About"},{"location":"about/#seodeploy-about","text":"SEODeploy is a labor of love which attempts to solve a common issue with deployment processes: SEO Error Checking. Often small mistakes, such as a changed canonical pattern, can have far-reaching traffic implications when deployed to production. Further, a lot of time can be lost by having team members manually check pages for issues and some SEO issues are easy to miss. By bringing SEO teams and development teams together to decide on the correct items to validate, and providing an automated way of including those checks, we hope to provide a tool which saves time and creates more consistency in your CI/CD workflows. We decided to integrate ContentKing because it really does allow for fuller end-to-end confidence. You can integrate our tool to catch mistakes on staging, but even if a mistake passes to production, ContentKing is there to let you know immediately, so you can quickly roll back changes.","title":"SEODeploy: About"},{"location":"about/#why-python","text":"We know that items like Puppeteer run more naturally on Node and Python is in no way the most efficient language. A few of the reasons we still thought Python would be the correct choice: Pyppeteer is available for Headless Chrome support, which tries to mirror the functionality of Puppeteer, as closely as possible. Python is a popular, and growing language, so finding developers is easier than others. The upside on creating additional modules for link analysis, NLP, extraction, anomaly detection, etc, with popular, and trusted available libraries, was a clear win. Python is supported in most cloud function environments, so running at the location of your choice is an option. Python can run asynchronously or synchronously. The tool doesn't care what language your site is developed in. Only what is outputted to Staging and Production pages.","title":"Why Python?"},{"location":"about/#made-by","text":"This opensource project is developed by LOCOMOTIVE , a Technical SEO Agency.","title":"Made By"},{"location":"about/#contact","text":"If you have questions on implementation, email me at jr.oakes@locomotive.agency .","title":"Contact"},{"location":"about/#interested-in-contributing","text":"Feel free to make a pull request, or email me at jr.oakes@locomotive.agency .","title":"Interested in Contributing?"},{"location":"todo/","text":"Todo \u00b6 Give example Jenkins Integration. Decide whether to pull prod and staging out of module config. # Not now. Finalize Alpha README Finalize CLI Finalize Sampling. Sitemap and ContentKing. Namespace Config module data Develop Headless Module using Pypeteer. Add timeout to ContentKing checking to keep from running infinitely long. Reduce lists of str, int, float to element if len = 1 in comparision. Shows change instead of add/remove. Change seotesting_config.yaml to seodeploy_config.yaml, for consistency. Testing (In Process - Currently 46% coverage) Create PyPI library. Refactor to add typing.","title":"Todo"},{"location":"todo/#todo","text":"Give example Jenkins Integration. Decide whether to pull prod and staging out of module config. # Not now. Finalize Alpha README Finalize CLI Finalize Sampling. Sitemap and ContentKing. Namespace Config module data Develop Headless Module using Pypeteer. Add timeout to ContentKing checking to keep from running infinitely long. Reduce lists of str, int, float to element if len = 1 in comparision. Shows change instead of add/remove. Change seotesting_config.yaml to seodeploy_config.yaml, for consistency. Testing (In Process - Currently 46% coverage) Create PyPI library. Refactor to add typing.","title":"Todo"},{"location":"modules/contentking/","text":"SEODeploy: Guide for the ContentKing Module. \u00b6 About ContentKing \u00b6 ContentKing keeps track of your website 24/7 so that you can catch unexpected SEO changes and issues before search engines and visitors do. Usage \u00b6 To use the ContentKing Module, you need to have your production and staging websites active in the ContentKing App. Adding a Site \u00b6 Go to your Account page and click Add Website . Enter your domain and select the page capacity. Click Add Website . Set up Google Analytics and Google Search Console integrations for production, if desired. Click Save . Set up alerts and reports for production, if desired. Click Save . Configuring Sites \u00b6 Go to your Account page and search for website. If your staging site is behind authentication, click on Monitoring and edit Authentication under Advanced Settings . If your staging or production site requires cookies, click on Monitoring and edit Cookies under Advanced Settings . Set up any path exclusions for your websites by clicking n the Set up URL Exclusion List . It will ask if you want to import from your robots.txt file. If you want to only check sample pages on staging, add / as a URL pattern exclusion, this will mean they only monitor URLs you send them via API. Once configured, ContentKing will automatically monitor all added site pages, up to the number specified in page capacity or not excluded in URL exclusions. Getting your API Keys \u00b6 You need to be on the Pro plan for ContentKing to activate the Reporting API. The Reporting API is required for this tool to check status of URLs. Go to Account Settings . Copy your CMS API and Reporting API integration tokens. Create if needed. Add the CMS API token to modules_activated.contentking.cms_api_key in seodeploy_config.yaml . Add the Reporting API token to modules_activated.contentking.report_api_key in seodeploy_config.yaml . Save your seodeploy_config.yaml file. Configuring ContentKing Module \u00b6 To activate the ContentKing Module, the following YAML code block should be nested under modules_activated in your seodeploy_config.yaml file. contentking: cms_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX report_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX endpoint: https://api.contentkingapp.com/v1/ api_timeout: 20 per_page: 300 timezone: Europe/Amsterdam batch_size: 10 batch_wait: 10 time_col: unstable_last_checked_at prod_host: https://locomotive.agency prod_site_id: 5-5671785 stage_host: https://stg.locomotive.agency/ stage_site_id: 5-5671782 replace_staging_host: True ignore: issues: analytics/analytics_missing: False analytics/visual_analytics_missing: False h1/duplicate: False h1/incorrect_length: False h1/missing: False h1/too_many: False canonical_link/incorrectly_canonicalized: False canonical_link/missing: False canonical_link/points_to_unindexable: False canonical_link/too_many: False images/alt_attribute: False images/title_attribute: False links/broken: False links/redirected: False links/to_canonicalized: False meta_description/duplicate: False meta_description/incorrect_length: False meta_description/missing: False meta_description/too_many: False title/duplicate: False title/incorrect_length: False title/missing: False title/too_many: False open_graph/description_incorrect_length: False open_graph/description_missing: False open_graph/image_missing: False open_graph/title_incorrect_length: False open_graph/title_missing: False open_graph/url_missing: False twitter_cards/description_incorrect_length: False twitter_cards/description_missing: False twitter_cards/image_missing: False twitter_cards/site_missing: False twitter_cards/title_incorrect_length: False twitter_cards/title_missing: False twitter_cards/type_invalid: False twitter_cards/type_missing: False xml_sitemap/incorrectly_missing: False xml_sitemap/incorrectly_present: False content: canonical: False title: False meta_description: False h1: False h2: False meta_robots: False open_graph_description: False open_graph_image: False open_graph_title: False open_graph_type: False open_graph_url: False twitter_card: False twitter_site: False google_analytics: False schema: False Configurable Items \u00b6 API Settings: These are settings for configuring how the tool connects to ContentKing and which hosts it crawls. cms_api_key : (str) CMS API Key from ContentKing report_api_key : (str) Reporting API Key from ContentKing api_timeout : (int) Number of seconds to wait for ContentKing API to respond. batch_size : (int) Number of pages to check in each batch. batch_wait : (int) Number of seconds wait between each batch. prod_host : (str) URL of production host (eg. https://locomotive.agency) prod_site_id : (str) ContentKing ID for host (note: Get from website URL in ContentKing \u2192 https://app.contentkingapp.com/account/websites/ 7-453638 ?view=list) stage_host : (str) URL of staging host (eg. https://stg.locomotive.agency) stage_site_id : (str) ContentKing ID for host (note: Get from website URL in ContentKing \u2192 https://app.contentkingapp.com/account/websites/ 4-17924878 ?view=list) replace_staging_host : (bool) Whether to search/replace staging host with production host, in staging HTML. Comparison Settings : These are settings that affect what is compared between your production and staging URLs. issues : Issues are SEO Issues that ContentKing finds on each URL. Set True or False content : Content is extracted content, like H1s, H2s, and SEO Meta data for each URL. Set True or False schema : Schema is extracted JSON+LD schema from each page. The tool recursively compares schema for changes. Running \u00b6 Once configured, the ContentKing module will run against all sample paths on Staging and Production, comparing items not excluded in the Comparison Settings above.","title":"ContentKing"},{"location":"modules/contentking/#seodeploy-guide-for-the-contentking-module","text":"","title":"SEODeploy: Guide for the ContentKing Module."},{"location":"modules/contentking/#about-contentking","text":"ContentKing keeps track of your website 24/7 so that you can catch unexpected SEO changes and issues before search engines and visitors do.","title":"About ContentKing"},{"location":"modules/contentking/#usage","text":"To use the ContentKing Module, you need to have your production and staging websites active in the ContentKing App.","title":"Usage"},{"location":"modules/contentking/#adding-a-site","text":"Go to your Account page and click Add Website . Enter your domain and select the page capacity. Click Add Website . Set up Google Analytics and Google Search Console integrations for production, if desired. Click Save . Set up alerts and reports for production, if desired. Click Save .","title":"Adding a Site"},{"location":"modules/contentking/#configuring-sites","text":"Go to your Account page and search for website. If your staging site is behind authentication, click on Monitoring and edit Authentication under Advanced Settings . If your staging or production site requires cookies, click on Monitoring and edit Cookies under Advanced Settings . Set up any path exclusions for your websites by clicking n the Set up URL Exclusion List . It will ask if you want to import from your robots.txt file. If you want to only check sample pages on staging, add / as a URL pattern exclusion, this will mean they only monitor URLs you send them via API. Once configured, ContentKing will automatically monitor all added site pages, up to the number specified in page capacity or not excluded in URL exclusions.","title":"Configuring Sites"},{"location":"modules/contentking/#getting-your-api-keys","text":"You need to be on the Pro plan for ContentKing to activate the Reporting API. The Reporting API is required for this tool to check status of URLs. Go to Account Settings . Copy your CMS API and Reporting API integration tokens. Create if needed. Add the CMS API token to modules_activated.contentking.cms_api_key in seodeploy_config.yaml . Add the Reporting API token to modules_activated.contentking.report_api_key in seodeploy_config.yaml . Save your seodeploy_config.yaml file.","title":"Getting your API Keys"},{"location":"modules/contentking/#configuring-contentking-module","text":"To activate the ContentKing Module, the following YAML code block should be nested under modules_activated in your seodeploy_config.yaml file. contentking: cms_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX report_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX endpoint: https://api.contentkingapp.com/v1/ api_timeout: 20 per_page: 300 timezone: Europe/Amsterdam batch_size: 10 batch_wait: 10 time_col: unstable_last_checked_at prod_host: https://locomotive.agency prod_site_id: 5-5671785 stage_host: https://stg.locomotive.agency/ stage_site_id: 5-5671782 replace_staging_host: True ignore: issues: analytics/analytics_missing: False analytics/visual_analytics_missing: False h1/duplicate: False h1/incorrect_length: False h1/missing: False h1/too_many: False canonical_link/incorrectly_canonicalized: False canonical_link/missing: False canonical_link/points_to_unindexable: False canonical_link/too_many: False images/alt_attribute: False images/title_attribute: False links/broken: False links/redirected: False links/to_canonicalized: False meta_description/duplicate: False meta_description/incorrect_length: False meta_description/missing: False meta_description/too_many: False title/duplicate: False title/incorrect_length: False title/missing: False title/too_many: False open_graph/description_incorrect_length: False open_graph/description_missing: False open_graph/image_missing: False open_graph/title_incorrect_length: False open_graph/title_missing: False open_graph/url_missing: False twitter_cards/description_incorrect_length: False twitter_cards/description_missing: False twitter_cards/image_missing: False twitter_cards/site_missing: False twitter_cards/title_incorrect_length: False twitter_cards/title_missing: False twitter_cards/type_invalid: False twitter_cards/type_missing: False xml_sitemap/incorrectly_missing: False xml_sitemap/incorrectly_present: False content: canonical: False title: False meta_description: False h1: False h2: False meta_robots: False open_graph_description: False open_graph_image: False open_graph_title: False open_graph_type: False open_graph_url: False twitter_card: False twitter_site: False google_analytics: False schema: False","title":"Configuring ContentKing Module"},{"location":"modules/contentking/#configurable-items","text":"API Settings: These are settings for configuring how the tool connects to ContentKing and which hosts it crawls. cms_api_key : (str) CMS API Key from ContentKing report_api_key : (str) Reporting API Key from ContentKing api_timeout : (int) Number of seconds to wait for ContentKing API to respond. batch_size : (int) Number of pages to check in each batch. batch_wait : (int) Number of seconds wait between each batch. prod_host : (str) URL of production host (eg. https://locomotive.agency) prod_site_id : (str) ContentKing ID for host (note: Get from website URL in ContentKing \u2192 https://app.contentkingapp.com/account/websites/ 7-453638 ?view=list) stage_host : (str) URL of staging host (eg. https://stg.locomotive.agency) stage_site_id : (str) ContentKing ID for host (note: Get from website URL in ContentKing \u2192 https://app.contentkingapp.com/account/websites/ 4-17924878 ?view=list) replace_staging_host : (bool) Whether to search/replace staging host with production host, in staging HTML. Comparison Settings : These are settings that affect what is compared between your production and staging URLs. issues : Issues are SEO Issues that ContentKing finds on each URL. Set True or False content : Content is extracted content, like H1s, H2s, and SEO Meta data for each URL. Set True or False schema : Schema is extracted JSON+LD schema from each page. The tool recursively compares schema for changes.","title":"Configurable Items"},{"location":"modules/contentking/#running","text":"Once configured, the ContentKing module will run against all sample paths on Staging and Production, comparing items not excluded in the Comparison Settings above.","title":"Running"},{"location":"modules/creating/","text":"SEODeploy: Creating New Modules. \u00b6 About Example Module \u00b6 We have provided an example module at /modules/example_module to show you how to create your own custom testing tool. Usage \u00b6 Overview of creating your own module for SEODeploy. Module Structure \u00b6 /modules/example_module/ /modules/example_module/__init__.py /modules/example_module/functions.py /modules/example_module/exceptions.py Files \u00b6 init .py : Contains the class used to activate and run the module. functions.py : Should contain any custom functions for your module. exceptions.py : Should contain any custom exceptions for your module. Module Class Flow \u00b6 The flow, to understand, for creating your own module is outlined below: The modulename should be defined in the SEOTestingModule class. e.g. self.modulename = \"example_module\" The modulename should be the same as the module folder name, and name of configuration section of seodeploy_config.yaml . Sample paths are passed to the run method of your module's class in __init__.py . There should be a function in functions.py that accepts sample_paths and config parameters, and returns data formatted with the seodeploy.lib.process_page_data function. page_data is passed to the self.run_diffs method and diffs are calculated. diffs are passed to the self.prepare_messages method and issue messages are generated. self.messages and errors are returned back to the main SEODeploy tool. If len(messages) > 0 or if len(errors) > 0 then the tool fails. Available Helper Functions \u00b6 The seodeploy.lib.helpers module contains the following functions which are supplies to maintain consistency across all module functions. group_batcher \u00b6 Given an iterator, returns batched results based on count. Given an iterator, returns batched results based on count. Call: group_batcher(iterator, result, count, fill=0) Parameters ---------- iterator: list or tuple Iterable object result: type The `type` of the results to be returned. `list` or `set` count: int How many in each Group. fill: str, int, float, or None Fill overflow with this value. If None, no fill is performed. Returns uneven last value. Returns ------- Generator mp_list_map \u00b6 Applies a function to a list by multiprocessing, if threading is active. Applies a function to a list by multiprocessing. Call: mp_list_map(lst, fnc, \\*\\*kwargs) Uses `max_threads` from `seodeploy_config.yaml` to determine whether to apply function by multiprocessing. if max_threads > 1 , then multiprocessing is used. Parameters ---------- lst: list Iterable object fnc: function A function to map to all list values. kwargs: dict keyword parameters to supply to your function. Returns ------- list List of data updated by function. process_page_data \u00b6 Reviews the returned results for errors and formats result. Reviews the returned results for errors and formats result. Call: process_page_data(sample_paths, prod_result, stage_result, module_config) Parameters ---------- sample_paths: list List of Paths. prod_results: list List of prod data dictionaries. Fmt: [{'path': '/', 'page_data':{'content': {'h1': 'heading'}}, 'error': None}, ...] stage_result: list List of stage data dictionaries. Fmt: [{'path': '/', 'page_data':{'content': {'h1': 'heading'}}, 'error': None}, ...] module_config: Config Module config. Returns ------- dict Dictionary in format: {'<path>':{'prod': <prod url data>, 'stage': <stage url data>, 'error': error}, ... } \"\"\" Configuration \u00b6 Main Config Data \u00b6 Here is an example base configuration for your module in seodeploy_config.yaml . All given parameters below are required. modules_activated: example_module: batch_size: 5 prod_host: https://locomotive.agency stage_host: https://stg.locomotive.agency replace_staging_host: True ignore: <this should match the structure of dictionary data provided to the `process_page_data` function> Any new parameters you add to your module's config are available to the config class. Example: # seodeploy_config.yaml example_module: custom_parameter: 1 # /modules/example_module/functions.py config = Config(module='example_module') assert config.example_module.custom_parameter == 1 # True Ignore Config Data \u00b6 The ignore section of your module's config information should match the page_data value (dict) that is sent to process_page_data in the prod_results and stage_result parameters. Example: page_data = {'content': {'h1': 'main heading', 'h2': 'sub-heading'}, 'other': {'something': 'value'} } example_module: ... ignore: content: h1: False h2: False other: something: True Diff Checking \u00b6 Diff checking is done automatically. Any data you supply in page_data for each key is tested based on its specific type. Supports: Strings, Dicts, Lists, Sets, Float, and Ints.","title":"Create Your Own"},{"location":"modules/creating/#seodeploy-creating-new-modules","text":"","title":"SEODeploy: Creating New Modules."},{"location":"modules/creating/#about-example-module","text":"We have provided an example module at /modules/example_module to show you how to create your own custom testing tool.","title":"About Example Module"},{"location":"modules/creating/#usage","text":"Overview of creating your own module for SEODeploy.","title":"Usage"},{"location":"modules/creating/#module-structure","text":"/modules/example_module/ /modules/example_module/__init__.py /modules/example_module/functions.py /modules/example_module/exceptions.py","title":"Module Structure"},{"location":"modules/creating/#files","text":"init .py : Contains the class used to activate and run the module. functions.py : Should contain any custom functions for your module. exceptions.py : Should contain any custom exceptions for your module.","title":"Files"},{"location":"modules/creating/#module-class-flow","text":"The flow, to understand, for creating your own module is outlined below: The modulename should be defined in the SEOTestingModule class. e.g. self.modulename = \"example_module\" The modulename should be the same as the module folder name, and name of configuration section of seodeploy_config.yaml . Sample paths are passed to the run method of your module's class in __init__.py . There should be a function in functions.py that accepts sample_paths and config parameters, and returns data formatted with the seodeploy.lib.process_page_data function. page_data is passed to the self.run_diffs method and diffs are calculated. diffs are passed to the self.prepare_messages method and issue messages are generated. self.messages and errors are returned back to the main SEODeploy tool. If len(messages) > 0 or if len(errors) > 0 then the tool fails.","title":"Module Class Flow"},{"location":"modules/creating/#available-helper-functions","text":"The seodeploy.lib.helpers module contains the following functions which are supplies to maintain consistency across all module functions.","title":"Available Helper Functions"},{"location":"modules/creating/#group_batcher","text":"Given an iterator, returns batched results based on count. Given an iterator, returns batched results based on count. Call: group_batcher(iterator, result, count, fill=0) Parameters ---------- iterator: list or tuple Iterable object result: type The `type` of the results to be returned. `list` or `set` count: int How many in each Group. fill: str, int, float, or None Fill overflow with this value. If None, no fill is performed. Returns uneven last value. Returns ------- Generator","title":"group_batcher"},{"location":"modules/creating/#mp_list_map","text":"Applies a function to a list by multiprocessing, if threading is active. Applies a function to a list by multiprocessing. Call: mp_list_map(lst, fnc, \\*\\*kwargs) Uses `max_threads` from `seodeploy_config.yaml` to determine whether to apply function by multiprocessing. if max_threads > 1 , then multiprocessing is used. Parameters ---------- lst: list Iterable object fnc: function A function to map to all list values. kwargs: dict keyword parameters to supply to your function. Returns ------- list List of data updated by function.","title":"mp_list_map"},{"location":"modules/creating/#process_page_data","text":"Reviews the returned results for errors and formats result. Reviews the returned results for errors and formats result. Call: process_page_data(sample_paths, prod_result, stage_result, module_config) Parameters ---------- sample_paths: list List of Paths. prod_results: list List of prod data dictionaries. Fmt: [{'path': '/', 'page_data':{'content': {'h1': 'heading'}}, 'error': None}, ...] stage_result: list List of stage data dictionaries. Fmt: [{'path': '/', 'page_data':{'content': {'h1': 'heading'}}, 'error': None}, ...] module_config: Config Module config. Returns ------- dict Dictionary in format: {'<path>':{'prod': <prod url data>, 'stage': <stage url data>, 'error': error}, ... } \"\"\"","title":"process_page_data"},{"location":"modules/creating/#configuration","text":"","title":"Configuration"},{"location":"modules/creating/#main-config-data","text":"Here is an example base configuration for your module in seodeploy_config.yaml . All given parameters below are required. modules_activated: example_module: batch_size: 5 prod_host: https://locomotive.agency stage_host: https://stg.locomotive.agency replace_staging_host: True ignore: <this should match the structure of dictionary data provided to the `process_page_data` function> Any new parameters you add to your module's config are available to the config class. Example: # seodeploy_config.yaml example_module: custom_parameter: 1 # /modules/example_module/functions.py config = Config(module='example_module') assert config.example_module.custom_parameter == 1 # True","title":"Main Config Data"},{"location":"modules/creating/#ignore-config-data","text":"The ignore section of your module's config information should match the page_data value (dict) that is sent to process_page_data in the prod_results and stage_result parameters. Example: page_data = {'content': {'h1': 'main heading', 'h2': 'sub-heading'}, 'other': {'something': 'value'} } example_module: ... ignore: content: h1: False h2: False other: something: True","title":"Ignore Config Data"},{"location":"modules/creating/#diff-checking","text":"Diff checking is done automatically. Any data you supply in page_data for each key is tested based on its specific type. Supports: Strings, Dicts, Lists, Sets, Float, and Ints.","title":"Diff Checking"},{"location":"modules/headless/","text":"SEODeploy: Guide for the Headless Module. \u00b6 About Headless \u00b6 The Headless module uses Google Chrome in Headless mode to render URLs and extract content, for comparison, from the rendered DOM. It also allows for the collection of timing and other performance metrics, like coverage data, for tested URLs. Usage \u00b6 To use the module requires a computer running Python v3.7 (tested) and enough space and memory to run Chromium (~150MB space, 8GB memory suggested). Configuring Headless Module \u00b6 To activate the Headless Module, the following YAML code block should be nested under modules_activated in your seodeploy_config.yaml file. headless: batch_size: 5 pyppeteer_chromium_revision: 769582 network_preset: Regular3G prod_host: https://locomotive.agency stage_host: https://stg.locomotive.agency stage_auth_user: user stage_auth_pass: pass user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 replace_staging_host: True ignore: content: canonical: False robots: False title: False meta_description: False h1: False h2: False links: True images: True schema: False performance: nodes: 0.20 resources: 0.20 layout_duration: 0.20 recalc_style_duration: 0.20 script_duration: 0.20 v8_compile_duration: 0.20 task_duration: 0.20 task_other_duration: 0.20 thread_time: 0.20 jd_heap_used_size: 0.20 js_heap_total_size: 0.20 time_to_first_byte: 0.20 first_paint: 0.20 first_contentful_paint: 0.20 largest_contentful_paint: 0.20 time_to_interactive: 0.20 dom_content_loaded: 0.20 dom_complete: 0.20 cumulative_layout_shift: 0.20 coverage: summary: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20 css: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20 js: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20 Configurable Items \u00b6 Chromium Settings: These are settings for configuring Chromium and how it crawls your sites. batch_size : (int) Number of pages to check in each batch. pyppeteer_chromium_revision : (str) Chromium Version. Versions can be found here . network_preset : (str) Network presets for Chromium. Controls upload and download speed, as well as latency. Possible values: GPRS , Regular2G , Good2G , Regular3G , Good3G , Regular4G , DSL , WiFi . prod_host : (str) URL of production host (eg. https://locomotive.agency) stage_host : (str) URL of staging host (eg. https://stg.locomotive.agency) stage_auth_user : (str) Username to bypass authentication on staging website. stage_auth_pass : (str) Password to bypass authentication on staging website. user_agent : (str) User Agent to crawl as. This is helpful to bypass security or compression/caching of CDNs on production website. replace_staging_host : (bool) Whether to search/replace staging host with production host, in staging HTML. Comparison Settings : These are settings that affect what is compared between your production and staging URLs. content : Content is extracted content, like H1s, H2s, and SEO Meta data for each URL. Set True or False performance : Performace data collected for each URL. Includes timing and select CDP Performance API data. Set True , False , or float . float values allow you to report on numeric changes greater than the percent supplied. e.g. a value of 0.20 would only report changes that are greater than 20%. coverage : Coverage is JS and CSS coverage data collected via the CDP Coverage API. Set True , False , or float . float values allow you to report on numeric changes greater than the percent supplied. e.g. a value of 0.20 would only report changes that are greater than 20%. Running \u00b6 Once configured, the Headless module will run against all sample paths on Staging and Production, comparing items not excluded in the Comparison Settings above.","title":"Headless"},{"location":"modules/headless/#seodeploy-guide-for-the-headless-module","text":"","title":"SEODeploy: Guide for the Headless Module."},{"location":"modules/headless/#about-headless","text":"The Headless module uses Google Chrome in Headless mode to render URLs and extract content, for comparison, from the rendered DOM. It also allows for the collection of timing and other performance metrics, like coverage data, for tested URLs.","title":"About Headless"},{"location":"modules/headless/#usage","text":"To use the module requires a computer running Python v3.7 (tested) and enough space and memory to run Chromium (~150MB space, 8GB memory suggested).","title":"Usage"},{"location":"modules/headless/#configuring-headless-module","text":"To activate the Headless Module, the following YAML code block should be nested under modules_activated in your seodeploy_config.yaml file. headless: batch_size: 5 pyppeteer_chromium_revision: 769582 network_preset: Regular3G prod_host: https://locomotive.agency stage_host: https://stg.locomotive.agency stage_auth_user: user stage_auth_pass: pass user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 replace_staging_host: True ignore: content: canonical: False robots: False title: False meta_description: False h1: False h2: False links: True images: True schema: False performance: nodes: 0.20 resources: 0.20 layout_duration: 0.20 recalc_style_duration: 0.20 script_duration: 0.20 v8_compile_duration: 0.20 task_duration: 0.20 task_other_duration: 0.20 thread_time: 0.20 jd_heap_used_size: 0.20 js_heap_total_size: 0.20 time_to_first_byte: 0.20 first_paint: 0.20 first_contentful_paint: 0.20 largest_contentful_paint: 0.20 time_to_interactive: 0.20 dom_content_loaded: 0.20 dom_complete: 0.20 cumulative_layout_shift: 0.20 coverage: summary: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20 css: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20 js: total_unused: 0.20 total_bytes: 0.20 unused_pc: 0.20","title":"Configuring Headless Module"},{"location":"modules/headless/#configurable-items","text":"Chromium Settings: These are settings for configuring Chromium and how it crawls your sites. batch_size : (int) Number of pages to check in each batch. pyppeteer_chromium_revision : (str) Chromium Version. Versions can be found here . network_preset : (str) Network presets for Chromium. Controls upload and download speed, as well as latency. Possible values: GPRS , Regular2G , Good2G , Regular3G , Good3G , Regular4G , DSL , WiFi . prod_host : (str) URL of production host (eg. https://locomotive.agency) stage_host : (str) URL of staging host (eg. https://stg.locomotive.agency) stage_auth_user : (str) Username to bypass authentication on staging website. stage_auth_pass : (str) Password to bypass authentication on staging website. user_agent : (str) User Agent to crawl as. This is helpful to bypass security or compression/caching of CDNs on production website. replace_staging_host : (bool) Whether to search/replace staging host with production host, in staging HTML. Comparison Settings : These are settings that affect what is compared between your production and staging URLs. content : Content is extracted content, like H1s, H2s, and SEO Meta data for each URL. Set True or False performance : Performace data collected for each URL. Includes timing and select CDP Performance API data. Set True , False , or float . float values allow you to report on numeric changes greater than the percent supplied. e.g. a value of 0.20 would only report changes that are greater than 20%. coverage : Coverage is JS and CSS coverage data collected via the CDP Coverage API. Set True , False , or float . float values allow you to report on numeric changes greater than the percent supplied. e.g. a value of 0.20 would only report changes that are greater than 20%.","title":"Configurable Items"},{"location":"modules/headless/#running","text":"Once configured, the Headless module will run against all sample paths on Staging and Production, comparing items not excluded in the Comparison Settings above.","title":"Running"}]}